import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_absolute_error
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense, LSTM
from sklearn.preprocessing import MinMaxScaler

# We are using our own SALES.csv generated by convert.py
sales_data = pd.read_csv('data\\SALES.csv')
sales_data['Invoice_Date'] = pd.to_datetime(sales_data['Invoice_Date'])
sales_data['DayOfWeek'] = sales_data['Invoice_Date'].dt.dayofweek
sales_data['Month'] = sales_data['Invoice_Date'].dt.month
sales_data['Year'] = sales_data['Invoice_Date'].dt.year
sales_data['Sales Liter'] = sales_data['Sales Liter'].str.replace(',', '').astype(float)

daily_sales = sales_data.groupby(['Invoice_Date']).agg({'Sales Liter': 'sum'}).reset_index()

scaler = MinMaxScaler()
daily_sales['Sales Liter'] = scaler.fit_transform(daily_sales['Sales Liter'].values.reshape(-1, 1))

sales_values = daily_sales['Sales Liter'].values
sequence_length = 7  
sequences = []
targets = []

for i in range(len(sales_values) - sequence_length):
    sequences.append(sales_values[i:i+sequence_length])
    targets.append(sales_values[i+sequence_length])


X = np.array(sequences)
y = np.array(targets)

train_size = int((2 * len(X))/3)
X_train, X_val = X[:train_size], X[train_size:]
y_train, y_val = y[:train_size], y[train_size:]

model = Sequential()
model.add(LSTM(50, activation='relu', input_shape=(sequence_length, 1)))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')

X_train = X_train.reshape(-1, sequence_length, 1)
X_val = X_val.reshape(-1, sequence_length, 1)

model.fit(X_train, y_train, epochs=200, batch_size=32, validation_data=(X_val, y_val))

val_predictions = model.predict(X_val)


val_predictions = scaler.inverse_transform(val_predictions)
y_val = scaler.inverse_transform(y_val.reshape(-1, 1))

mae = mean_absolute_error(y_val, val_predictions)
print(f"Validation MAE: {mae:.2f}")

predicted_df = pd.DataFrame({
    'Date': daily_sales['Invoice_Date'][train_size+sequence_length:],
    'Actual_Sales': y_val.flatten(),
    'Predicted_Sales': val_predictions.flatten()
})

plt.figure(figsize=(12, 6))
plt.plot(daily_sales['Invoice_Date'][train_size+sequence_length:], y_val, label='Validation Data', color='green')
plt.plot(daily_sales['Invoice_Date'][train_size+sequence_length:], val_predictions, label='Predicted Sales', color='red')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.legend()
plt.title('Actual vs. Predicted Daily Sales')

plt.show()

print(predicted_df)
